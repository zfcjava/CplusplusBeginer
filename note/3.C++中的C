第三章 C++中的C
    因为C++是以C为基础的，所以要用C++编程就必须熟悉C的语法，就像要解决微积分问题就必须要对代数十分了解一样。

    如果读者以前没有接触过C，本章将会提供在C++中使用C风格的一个很好的背景知识。如果读者对K&R所著的C语言数第一版描述的风格
比较熟悉的话，就会发现在C++以及在标准C中有一些新的、不一样的特征。如果读者对标准C熟悉的话，则应当通览本章找出C++中雨中不同
的特点。注意这里介绍的是C++的一些基本特征，这些特征相似或者是对C的一些修改。C++的更为复杂的特征将会在后面各章中介绍。

    本章结合读者对其他语言编程的介绍，对C的构造和C++的一些基本操作作了简要介绍。更为详细的介绍参见本书附带的光盘。

    3.1 创建函数

        函数原型的概念

        3.1.1 函数的返回值

        3.1.2 使用C函数库

            在使用C++编程时，要先权衡可移植性和功能优先性。如果要保证可移植性，要使用标准C/C++库。

        3.1.3 通过库管理器创建自己的库

            我们可以将自己的函数收集到一个库中。大多数编程包带有一个库管理器来管理对象模块组。每一个库管理器有它自己的命令
        ，但有这样一个共同的想法：如果想创建一个库，那么就建立一个头文件，它包含库中所有函数的原型。把这个头文件放置在
        预处理器搜索路径的某处，或者在当前目录中，或者在包含路径中（总而言之就是方便定位到）。现在把所有的对象模块联通建
        成后的库名和其他库放置在同一位置，以便连接器能够发现他。当使用自己的库时，必须向命令行添加一些东西。让连接器知道
        你调用的函数查找库。因为函数库随系统而异，所以你必须在你的系统手册中查找所有细节


    3.2 执行控制语句

        3.2.1 真和假
        3.2.2 if else
        3.2.3 while
        3.2.4 do-while
        3.2.5 for
        3.2.6 break 和continue
        3.2.7 switch
        3.2.8 goto
            尽量避免使用；避免滥用

        3.2.9 递归

    3.3 运算符简介

        3.3.1 优先级
        3.3.2 自增和自减

    3.4 数据类型简介

        在编写程序中，数据类型定义来了使用存储空间的方式。通过数据类型告诉编译器怎样创建一片特定的存储空间，以及怎么操纵
    这片存储空间。
        数据类型可以是内部或抽象的。内部数据类型是编译器本来就能理解的数据类型，直接与编译器有关。C和C++中的内部数据类型
    几乎是一样的。相反，用户定义的数据类型是我们和别的程序员创建的类型，作为一个类。他们一般称为抽象数据类型。编译器启动
    时，知道怎么处理内部数据类型；编译器再通过读包含了声明的头文件认识怎么处理抽象数据类型。（在C、C++中有内部类型和抽象
    数据类型两种）

        3.4.1 基本内部类型
            C、C++有四个基本的内部类型 chat int double float
        3.4.2 bool类型与true和false
            标准C++的bool类型有两种内部常量true和false。另外boole 与int可以互转，但是不怎么推荐。还有指针。
        3.4.3 说明符
            说明符（specifier）用于改变基本内部类型的含义并把它们扩展到一个更大的集合。有四种说明符 long short singned
        unsigned。
        3.4.4 指针简介
            不管什么时候运行一个程序，都是先把程序装入到计算机内存中。因此，程序中所有的元素都存储在内存的某处。内存一般
         被设置成一系列的连续内存位置；我们通常把这些位置看做是8位字节，但实际每一个空间大小取决于机器的结构，一般称为
         机器的字长。每一个空间可按它的地址与其他空间区分。为了便于讨论，我们认为所有机器都是用连续地址的字节从0开始，一直
         到计算机内存的上限。
            因为程序运行时驻留内存中，所以程序中的每一个元素都有地址。假设我们从一个简单程序开始。
            程序中的每一个元素都占内存，甚至函数也是占内存的。
            一旦指针初始化了一个值，我们所做的最基本的事情就是通过指针修改其指向的值。至于为什么要通过一个变量作为代理去
        修改另一个变量？1.为了能在函数内修改外部对象（参考下一节）。2.灵活编程
        3.4.5 修改外部对象
            通常，向函数中传参，在函数内部会生成改参数的一个拷贝。这种称为按值传递。
        3.4.6 C++引用简介
            在C和C++中指针的作用基本一样，但是C++增加了另外一种给韩处传递地址的途径，这就是按引用传递，他也存在于一些其他编程
        语言中，并不是C++发明的。引用和指针的一个区别在于 代码可读性
        3.4.7 用指针和引用作为修饰符


    3.5 作用域
        作用域规则告诉我们一个变量都有其作用范围。
        3.5.1
            正如本章前面提到的那样，定义变量时，C和C++有着显著的区别。这两种语言都求变量使用前必须定义。但是C强制在作用域开始的
        地方定义，但是C++可以实时定义。

    3.6 指定存储空间分配
        创建一个变量时，我们拥有指定变量生存的很多选择，指定怎样给变量分配空间，以及指定编译器怎样处理这些变量。
        3.6.1 全局变量
            全局变量时在所有的函数体外部定义的，程序所有的部分（甚至其他文件中的代码）都可以使用。全局变量不受作用域的影
        响，总是可用的（也就是说，全局变量的生命周期一直到程序结束）。如果在一个文件中使用extern关键字生命一个文件中的全局
        变量，那么这个文件可以使用这个数据。例如

        3.6.2 局部变量
            局部变量仅在函数内部有效，默认有关键字auto
            3.6.2.1 寄存器变量
                寄存器变量仅是一个局部变量。关键字register，告诉编译器尽可能快的访问，并不会一定放在寄存器中。注意：使用
            该变量是有限制的。该变量必须在一个块中发挥作用，不能是全局变量或者静态变量。另外可以作为函数的形参。但是一般情况，
            我们不去做编译器优化

        3.6.3 静态变量

            关键字static有一些独特的意义。通常，函数中定义的局部变量会在作用域结束时消失。当再次调用这个函数时，会重新创建
        该变量的存储空间，其值会被重新初始化。如果想使局部变量的值在整个生命周期依然存在，我们可以定义函数的局部变量为static
        类型，并给它一个初始化。初始化只能在函数第一次调用时执行，函数调用之间变量的。至于为什么不使用全局变量，因为访问
        权限的。
            static的第二层含义和前面的含义相关，即在某个文件外不可访问。当应用static于函数名和所有函数外部变量时，他的意思是是，
        在这个文件外部不可以使用这个名字。函数名或变量是属于局部文件的。

        3.6.4 外部变量
            签名已经简要的描述和说明了extern关键字。他告诉编译器存在一个变量和函数，即使编译器在当前编译的文件中没有看到它，
        这个变量或函数可能在另一个文件或者当前文件的下面有声明。
            3.6.4.1 连接
                为了理解C和C++的行为，必须对连接有所了解。在一个程序执行过程中，标识符代表存放变量或被编译过的函数体的存储
            空间。连接用连接器所见的方式描述存储空间。连接的方式有两种：内部连接和外部连接。
                内部连接因为着支队正在被编译的文件创建存储空间。用内部连接，别的文件可以使用相同的标识符或局部变量，连接
            器不会发现冲突----也就是为每一个标识符创简单粗存储空间。在C和C++中，内部连接是有关键字static指定的。
                外部链接意味着为所有被编译的文件产检一片单独存储空间。一旦创建存储空间，连接器必须解决所有对这片存储空间
            的引用。全局变量和函数名有外部链接。在C中，不比使用extern定义变量或者函数，但在C++中对于const有时必须使用。
                调用函数时，自动变量只是存在临时堆栈中。连接器不知道自动变量，所以这些变量没有连接。
                内部连接解决的是文件内部的，外部链接是链接文件外部的关系。调用函数时，自动变量只是临时存在于堆栈中。连接器
            不知道自动变量。

        3.6.5 常量
            在旧版本C中，如果想建立一个常量，必须使用预处理器：
            #define PI 3.14159
            无论在何地使用PI，都会被雨处理器用值代替。当使用预处理器创建常量时，我们在编译器的范围之外控制这些常量。对于名字
        PI上不进行类型检查，也不能得到PI的地址。PI不能是用户定义的乐行。PI的意义是从它定义的地方持续到文件结束的地方；预
        处理器并不识别作用域。
            C++引用了命名常量的概念，命名常量就像变量意义，只是他的值不能改变。修饰符const告诉编译器这个名字表示常量。不管
        内部的还是用户定义的数据类型都可以定义为const。如果顶一个某个对象为常量，然后尝试修改它，编译器会报错。
            必须用下述方式说明一个常量的类型：
            const int x = 10；、
            在标准的C、C++中，可以在参数列表中使用命名常量，即使列表中的参数是指针或者引用（也就是说，可以获得const的地址）
        const就像一个正常的变量一样有作用域，所以可以在函数中隐藏一个const，确保名字不会影响程序的其他部分。
            const由C++采用，并加进标准C中，尽管他们很不一样。在C中，编译器对待C如同变量一样，只不过带有一个特殊标记，意思是
        “不要改变我”。当C中定义const时，编译器为它创建存储空间，所以如果有两个不同的文件（或者在头文件中）定义过个同名
        的const，连接器将会发生错误。
            3.6.5.1 常量值
            在C++中const必须有初始值。

        3.6.6 volatitle变量
            volatile “不知道何时会改变”，避免编译器对其做优化，造成重大错误。

    3.7 运算符及其使用

        3.7.11 转换运算符
        3.7.12 C++显式转换

            应该小心使用转换，因为转换实际上要做的就是对编译器说“忘记类型转换，把他看作是其他类型”这也就是说，在C++类型
        系统中引入一个漏洞，并阻止编译器报告类型方面出错了。更为糟糕的是，编译器会相信他，而不执行任何其他的检查捕获错误，
        一旦开始进行转换，程序员必须自己面对各种问题。事实上，无论什么原因，任何一个程序如果使用很多转换都值得怀疑。一般
        情况下，很少使用转换，它只适用于解决非常特殊问题。
            一旦理解了这一点，在遇上一个出故障的程序时，第一个反应应该是寻找作为犯罪的转换。但是怎样确定C风格转换的位置呢？
        它们只是在括号中的类型名字，如果开始查找这些的话，我们很难把他们和代码的其他部分分开来。
            标准C++包括了一个显示的转换语法，使用它来完全替代就得C风格的转换。显示类型转换语法使我们很容易发现它们，因为
        通过它们的名字就能找到。
        3.7.12.1 静态装换（static_cast）

            static_cast全部用于明确的定义的转化，包括编译器允许我们所做的不用强制转换的“安全”转化和不太安全的但定义清楚
        的转化。static_cast包含的转化类型包括非强制转化、窄化


    3.8 创建复合类型


    3.9 调试技巧

    3.10 函数地址

    3.11 make分段编译

    3.12 小结

    3.13 练习
