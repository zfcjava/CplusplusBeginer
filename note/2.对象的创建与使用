第二章 对象的创建与使用

    介绍某些语法和程序构造的概念
     * 对面向对象有一些感官，C语言的具体语法在第三章进行介绍。

    用户自定义的数据类型或者类，是c++区别于传统语言的地方。类一种新的数据类型，用来解决特定的问题。一旦创建了类，用户无需
知道它的构建和工作细节（这句话是有待商榷的）。

2.1 语言的翻译过程

    任何一门计算机语言，都要从人们易于理解的形式（源码）转换为计算机能够执行的（计算机指令）。通常其翻译作用的有两类：
 解释器和编译器。

    2.1.1 解释器

          将源码解释为一系列的动作（每个动作可以包含多个指令）并且立即执行这个动作。例如 Basic就是当时流行的一种解释型的
    语言，传统的解释性语言，解释器一次翻译和执行一行。为了提高速度，可以先对它们进行编译，转为为中间语言，由更快的解释器
    进行执行（比如python）

          优点：从写代码到执行代码，立即完成，因此容易排错。
                良好的交互性和快速开发。
          缺点: 解释器进驻内存；有些解释器需要一次将源码进入内存。

     2.1.2 编译器

          编译器直接将源代码转化为汇编语言或者机器指令。最终的结果是一个或者多个机器码文件。这是一个复杂的过程，通常是需要
     几步完成。使用编译器完成该转化，是一个漫长的过程。

          仰仗编译器设计者的聪明才智，编译器生成的程序只需要较少的运行空间，并且运行速度更快。虽软编译后的程序较小、运行速度快
     是人们认为应当使用编译器的理由，但是在许多时候这却不是最重要额。某些语言（C语言）可以分别编译各段程序。最后使用链接
     器把各段程序连接成一个完成的可执行程序。这个过程称为“分段编译”

          本段编译有许多好处。由于编译器或者编译环境的限制，不能一次完成编译整个程序，可以分段编译。每次创建和测试程序的
     一部分，当着部分程序能正常运行后，把它作为一个程序组块保存起来。人们把测试通过并能正常运行的程序块收集起来加入库中，
     供其他程序员使用。由于独立创建每一段程序，其他各段的复杂行便被隐藏起来。所以这些特点执行大型程序的创建。

         编译器的调式功能不断地得以改进。早起的编译器只能产生极其代码，要知道颈型的运行状态，程序员只能掺入打印语句。但是这样做
      并不是总是有效的。现代编译器能在可执行程序中插入与眼袋吗有伏案的信息。这个信息有有些强大的源代码层的调试器使用，一遍通过跟踪
      程序经过源代码的进展来展示程序的执行情况。

         为了提高编译速度，一些编译器采用了内存中编译。大多数的编译器，编译时每一步都要读写文件，内存中编译器就是将编译器程序
     存放在RAM中。对于小程序来说，内存中编译器几乎能和解释器一样相应。

     2.1.3 编译过程

         为了用C/C++ 编程，应该了解编译过程和所需要的工作。某些语言编译时，首先对源代码进行预处理。预处理器（preprocessor）
    是一个简单的程序，它用程序员（）定义好的模式代替源码中的模式。预处理指令用来节省输入，增加代码的可读性。（C++程序设计并不鼓励多
    使用预处理指令，因为它可能会引起一些不易发现错误，这些将在本书的后面进行分析）。预处理过的代码通常存放在一个中间文件中。

         编译一般分为两遍进行。首先，对与处理过的代码进行语法分析。编译器吧源代码分解成小单元并把他们按树形结构租出起来。表达式
     “A+B”中额“A”“+”“B”就是语法分析树的叶子节点。

         有时候会在编译的第一遍和第二遍之间使用 全局优化器 来生成更短更快的代码。

         编译器的第二遍，由代码生成器遍历语法分析书，把树的每个节点转化为汇编语言或者机器代码。如果代码生成器生成的是会变语言
    那么还必须用汇编器对齐进行汇编。这两种情况的最后结果都是生成目标模块（通常以.0或者.obj为扩展名的文件）。有时在第二遍使用
    窥孔优化器  从向另一段代码中查找冗余汇编语句。

         用“object” 一词表示一段既期待吗是一种不合适的选择，在面向对象程序设计之前这一词是普遍使用的。在讨论编译时 “object”
     和“goal”的含义是相同的。而在面向对象程序设计中，它就是由"一个有边界的事物"。

         连接器（linker） 把一组目标模块连接成为一个可执行的程序，操作系统可以装载和运行它。但某个目标模块中的函数要引用
     另一目标模块中的函数或变量时，有连接器来处理这些引用；这就保证了所有需要的、在编译时存在的外部函数和变量仍然存在。连接器还要添加一个特殊的摸
     目标模块来完成从程序的启动任务。

         连接器能搜索成为“库”的特殊文件来处理他的所有引用。库将一组目标模块包含在一个文件中。苦有一个被称为 库管理器 的程序来创建和维护。

     2.1.3.1 静态类型检测

         类型检查时编译器在第一遍中完成的。类型检查是检查函数参数是否这确实用，放置许多程序设计错误。由于类型检查是在编译阶段而不是
     在运行阶段，所以称为静态类型检查。

         某些面向对象预压也可以在程序运行时做部分类型简称。动态类型检查和静态类型建厂结合使用，比仅仅使用静态类型检查更有效。但他也有增加了程序执行的
     的开销。
         C++使用静态类型检查，因为C++语言不采用任何特殊的运行时来处理错误操作。静态类型检查在编译时就告知程序员类型被误用，从
     而加快了执行时的速度。通过对C++学习，我们会看到C++语言的主要涉及目标是 追求运行速度快。这与面向生产的编程语言C语言一样。

         在C++里可以不使用静态类型检查。我们可以自己做类型检查---这只需要写一些代码。<*******>





2.2 分段编译工具

    当创建大型的项目时，分段编译尤为重要。在C/C++ 可以将一个大程序构造为许多小的程序块，而这些小程序块容易管理，可独立调试。
（怎么分割呢？）程序分割的最基本的方法就是创建命名子程序（以函数为基本单位进行分割，函数是程序的基本单位）。函数与文件的关系
是多对一

    程序可以有多个文件构成。如果一个文件中的函数要访问另一个文件中的函数或者数据。编译一个文件时，C、C++ 编译器必须知道
另一个文件中的函数和数据，特别是它的名字和基本用法。编译器要确保函数和数据被正确的使用。‘告知编译器’ 外部函数和数据名
及他们的模样，这一过程叫做生命。一旦声明了一个函数或者变量，编译器就知道怎样检查对他们的引用，以确保应用正确。


    2.2.1 声明与定义

        声明和定义在本书中有明确的区分。声明是向编译器介绍名字（标识符）、他告诉编译器“这个函数或者变量在哪里可以找到，
    它的模样是什么”。而定义是说：“在这里创建函数或者变量”。它为名字分配存储空间。对于变量，编译器确定变量的大小并且
    开辟内存空间保存变量的数据。对于函数，编译器会生成代码，这些代码最终也要占一定的内存。

        注意：在C和C++中，可以在不同的地方声明相同的变量或者函数，但是只能定义一个。当连接器连接所有的目标模块，如果发现
    一个函数或者变量有多个定义，连接器将报错。

        定义也可以是声明。如果定义 int x； 之前编译器没有发现标识符x，编译器则把这一标识符看成声明并立即分配存储空间。

        2.2.1.1 函数声明语法
        2.2.1.2 一点说明
            对于无参函数，C和C++有很大的不同。在C语言中，声明 int func（）； 表示可以带任意参数类型的任意个数的函数。但是
        在C++中，只是无参函数的生命。

        2.2.1.3 函数的定义
            int func（）{}
        2.2.1.4 变量声明的语法
            int a; //定义一个变量
            extern int a; //声明一个变量
        2.2.1.5 包含头文件

            大部分的库包众多的函数和变量、为了减少工作量，确保一致性，当对这些函数和变量做外部声明时，C、C++使用头文件
        头文件是一个含有某个库的外部声明含糊和变量的文件，通常扩展名为.h.
            头文件由创建库的程序员提供。为了声明在库中已有的函数和变量，用户只需要包含头文件即可。包含头文件，要使用include
        预处理器命令。它告诉预处理器打开指定的头文件并在#include语句所在的地方插入头文件。#include有两种指定文件的方式。
        <> 或者 “”

            注意：使用<>来指定文件时，预处理器以特定的方式来寻找文件，一般是环境中或编译器命令行指定的某种寻找路径、这种
        设置寻找路径的随机器、操作系统、C++实现不同而不同，要视具体情况而定。
            使用“”时，预处理器以“定义实现的途径”来寻找文件。通常是从当前目录开始寻找，如果没有找到文件，那么include命令与按《》
        方式重新查找、

        2.2.1.6 标准C++ include 语句格式

            随着C++的不断演化，不同的编译器厂商选中了不同的文件扩展名。而且不同的操作系统对文件名有不同的限制，特别是对文
        件名长度限制。结果引起了对源代码的可移植性的限制。为了消除这些差别，标准使用的格式允许文件名长度大于众所周知的
        8个字符，去除扩展名。例如代替老式的包含iostream.h 的语句。
            （由于不同系统对文件名称的支持的长度的不同，为了消除这种差别，标准格式允许文件名称大于8个字符，并且带扩展名）
            #include<iostream.h> 变成 #include<iostream>
            如果需要切断文件名加上扩展名，翻译器会按照一定方式实现包含语句，以适应特定的编译器和操作系统。当然如果想使用这用
        没有扩展名的风格，但是编译器厂商没有提供支持，也可以将厂商提供的头文件拷贝成没有扩展名的文件。（也就是以编译器厂
        商为主）
            兼容性（从C继承下来的带有传统的“.h”扩展名的库依然可以使用），然而，也可以使用更现代的C++风格，使用使用它们
        即在文件名前加上一个字母“C”。就这样
                #include<stdio.h>
                #include<stdlib.h>
                就变成
                #include<cstdio>
                #include<stdlib>
            对于所有的标准C头文件这就为读者提供了一个区分标志，说明使用的是C还是C++库
        新的包含格式和老的效果是不一样的：使用.h的文件是老的、非模板化的版本；而没有.h的文件是新的模板化的版本。如果在同一程序中
        混用，会遇到某些问题。

    2.2.2 连接

        连接器吧有编译器生成的目标模块（一般是带有“.o”或者“.obj”扩展名的文件）连接成为操作系统可以加载和执行的程序。它是
    编译过程的最后阶段。

        连接器的特性岁系统不同而不同。通常只告诉连接器目标模块和要链接的库的名称，及可执行程序的名称，连接器就可以执行连接任务了、
    一些系统要求用户自己调用连接器。很多C++软件包可以当用户通过C++编译器来调用连接器。多数情况下，连接器的调用是不可见的。

        某些早起的连接器对目标文件和库文件只差找一次，这些连接器重左到右查找一遍所给的目标文件和库文件列表。因为目标文件和
    库文件的顺序特别重要。如果连接的时候遇到一些莫名其妙的问题，就有可能与给定连接器的文件顺序有关。

    2.2.3 使用库文件

        到此，了解了一些基本的术语，现在可以学习如何使用库了。
        使用库必须：
        1） 包含库的头文件。
        2） 使用库中的函数和变量。
        3） 把库连接到可执行程序中。
        目标模块没有加入库时，也可以执行上述步骤。对于C/C++ 的分段编译，包含头文件和连接目标模块是基本步骤。


        2.2.3.1 连接器如何查找库

            当C或者C++要对函数和变量进行外部引用时，根据引用情况，连接器会选择两种处理方法中的一种。如果还没有遇到这个函数
        或变量的定义，连接就会把它的标识符加到“未解析的引用”列表中。如果连接器遇到过函数或者变量的定义，那么这就是已解决
        的引用。
            如果连接器在目标模块列表中不能找到函数或变量的定义，它将去查找库。库有多种索引方式，连接器不必到库里查找是有目标模块
        而只需要浏览索引。当连接器在苦衷找到定以后，就将整个模块而不仅仅是函数定义埒街道可执行程序中。注意，仅仅是库中包含
        所需要定义的目标模块加入连接，而不是整个库参加连接。如果想尽量减少程序的长度，当构造自己的库时，可以考虑一个源码
        文件只放一个函数。这要求更多的编辑工作，但他对使用者来说是有益的。
            因为连接器按指定的顺序朝赵文件，所以，用户使用与库函数同名的函数，把带有这用函数的文件插入到库文件名列表之前，
        就能用他自己的函数取代库函数。由于在找到库文件之前，连接器已先用用户给定的函数来解释引用，因为被使用的是用户的函数
        而不是库函数。注意，这可能是一个bug，并且C++命名空间禁止这样做。

        2.2.3.2 秘密的附加模块（核心库和附加库的区别）

            当创建一个C、C++可执行程序是，连接器会秘密连接某些模块。其中之一是启动模块，它包含了对程序的初始化例程。初始化
        例程是开始执行C、C++程序时必须首先执行的一段程序。初始化例程建立堆栈，并初始化程序中的某些变量。
            连接器总是从标准库中调用经过编译“标准”函数。由于标准库总是可以被找到，所以只要程序中包含所需的头文件，就可以使用
        库中的任何模块，并且不比告诉连接器去找标准库。例如，标准的C++库中有iostream函数。要用这些函数，只需要包含《iostream》
        即可。
            如果使用附加的库，必须把该库文件名加到由连接器处理的列表文件中。

        2.2.3.3 使用简单的C语言库

            用C++来编写代码，并不禁止用C的库函数。事实上，整个C的库以默认方式包含在标准C++的库中。这些函数替代用户做了大量
        工作，因此，使用它们，可以节约许多时间。
            本书将尽可能使用标准的C++库函数（也包含标准C库），但是只有用标准库函数才能保证程序的可移植性。在某些情况下，
        必须使用非标准的C++库函数的地方，我们也尽量使用符合POSIX标准的函数。POSIX是基于UNIX上的一个标准，他包括的函数是C++
        库中没有的。通常能再UNIX（特别是LInux）平台上能找到的POSIX函数，也可能在DOS/WINDOWS下找到。例如，如果用到多线程
        编程，最好是使用POSIX线程库，这样的代码容易理解。端口和维护（POSIX线程库通常只用到操作系统提供的基本线程设施）；

2.3 编写第一个C++ 程序

        现在，已经了解了几乎足够的基础知识，可以创建和编译一个程序了，它将用到标准的C++ iostream类. 这些iostream类可从文件和
    标准的输入输出设备中读写数据。这个简单的程序将利用流对象在屏幕上显示消息。

    2.3.1 使用iostream类

        为了声明iostream类中的函数和外部数据，要用如下语句包含头文件
        cout << "hello world!" ;  “<<” 在C语言中表示移位操作；但是在C++中进行了“重载”，进而赋予了特殊含义。


    2.3.2 名字空间

        避免不同人员或者同一人所编写函数名相同导致不可用。关键字namespace。 库或者程序中的每一个C++定义集都会封装在命名空间中。
        命名空间的出现，因为着程序编写之前就需要确定它们（如果只是包含头文件，编译器无法找到热河有关函数和对象的声明，还需要
    命名空间）。

        using namespace std；这意味着打开std命名空间，使它的所有名字都可用。如果有了这条语句，就不用担心库组件是在一个命名空间中
    ，因为在使用using指令的地方，它使命名空间在整个文件中都是可用的。

        命名空间和包含的头文件时间存在相互关系。现在头文件包含命令已经标准化了，国务典型包含头文件的方式是带上“。h”。那时，命名空间不是语言一部分
    索引，对已经存在的代码要提供向后兼容。如果给出
        #include<iostream.h>
        它相当于
        #include<iostream>
        using namespace std;
        但本书使用标准包含格式（即不带“.h”）,因此必须显式使用using命令。
        到此，介绍了对命名空间必须了解内容，在第10章将更全面的讨论这个问题。

    2.3.3 程序的基本结构
        C/C++程序是变量、函数定力、函数调用的集合。程序开始运行时，它执行初始化代码并调用一个特殊的函数“main（）”。程序的
    主要代码放置在这里。
        正如前面提到的，函数定义包含返回类型（C++中必须指明）、函数名、括号内的参数列表、大括号内的函数代码、下面是一个简单
    的定义：
        int function(){
            //实现
        }

        上面这个函数的参数列表为空，函数体内有一套注释

    2.3.4 “Hello world”

        //;
        //
        #include<iostream>
        using namespace std;

        int main(){
            cout<< "hello world! I am " << 8 << " Today!" <<endl;
        }

        ///:~ 文件结束的标志

        通过 “<<” 操作符把一系列参数传给cout对象。然后他 cout对象从左向右的顺序将参数但因出来。输入输出流的endl 表示
    一行的结束换行操作。在C语言中，""中表示字符串，但是在C++中，提供了强大的功能类string类，进行处理字符串，字符串也因此
    有了字符数组的称号。
        编译器为字符数组分配存储空间，把每个字符对用的ASCII码放入到该空间中。编译器在字符数组后自动加上含“0”值的额外存储
    片，标志数组结束。
        转义序列 \\ \t \b \n

    2.3.5 运行编译器

        使用GNU C++ 编译器，可输入
            g++ Hello.cpp
        其他编译器也有类似语法。

2.4 关于输入输出流

    //:
    #include <iostream>

    using namespace std;
    int main() {
        //Specifying formats with manipulaters
        cout << "a number in decimal :"
             << dec << 15 << endl;


        cout << "in octal: " << oct << 15 << endl;
        cout << "in hex: " << hex << 15 << endl;

        cout << "a floating-point number: "
             << 3.1459 << endl;
        cout << "no-printing char (escape): "
             << char(96) << endl;

        return 0;
    }
    ///:~

    2.4.1 字符数组的拼接

           cout << "no-printing char (escape): "
                                "qwsadfasf"
                                 "qwsadfasf"
                                  "qwsadfasf"
                                   "qwsadfasf"
                                 << endl;  //C/C++ 自由语言，中间会默认进行拼接

    2.4.2 读取输入数据
           cin >> x >>endl;

    2.4.3 调用其他程序

        典型的例子就是在Unix shell脚本或者 DOs批处理文件中，使用从标准输入、输出读写程序。用标准的C语言system（）函数，C
    C++程序可以调用任何程序。system（）函数在头文件<cstdlib>中已经声明。
        //:
        #include <cstdlib>
        int main() {
            system("ipconfig"); //调用系统命令
            return 0;
        }
        ///:~
        从这个程序可以看出，在C++中使用普通的C函数库是很容易的事，只要包含头文件和调用所需的库函数就行了。

2.5 字符串简介

        虽然字符数组很有用，但它有些限制。简单地说他就是存放在内存中的一组字符，如果要用它做什么事情，必须处理所有细节。例如，
    引号内字符数组的大小在编译时就确定了。如果想在这样的字符数组中添加字符，需要了解许多相关的知识（包括动态内存管理，
    字符串数组的拷贝、连接等），才能完成添加任务。这真是我们所希望的有一种对象能够替我们完成的事。
        标准的C++string类就是设计用来处理（并隐藏）对字符数组的低级操作，而这写操作早期是由C程序员完成的。从有C语言以来，者
    些操作一直是一个编程费时、产生错误的原因。虽然本书第二卷中专门有一章来介绍string类，但由于string能简化编程，对编程
    十分重要，因此在此处先介绍一些。
        为了使用string类，需要包含C++头文件<string>.string类在名字空间 std中，因此要使用using指令
        //:
        #include <string>
        #include <iostream>

        using namespace std;
        int main() {
            string s1, s2; //定义两个变量 空strings
            string s3 = "hello world";
            string s4("I am");

            s2 = "Today"; //指定一个字符串
            s1 = s3 + " " + s4;
            s1 += " 8 ";

            cout << s1 + s2 + "!" << endl;
            return 0;
        }
        ///:~
2.6 文件读写

        在C语言中，完成打开和处理文件这样复杂的操作，需要对C语言有较深的了解。然而C++语言的iostream库提供了一种简单的方法来处理
    文件，因此，介绍这个功能可以比在C语言汇中介绍这一功能更早。
        为了打开文件进行读写操作，必须包含<fstream>.虽然<fstream>会自动包含<iostream>，但是如果打算使用cin，cout，最好
    还是显式地包含<iostream>

        为了读而打开文件，要创建一个ifstream对象，它的用法与cin相同，为了写而打开文件，要创建一个ofstream对象，用法与cout
    相同。一旦打开一个文件，就可以像处理其他iostream对象那样进行读写、非常简单。

        在iostream库中，一个十分有用的函数是getline(),用它可以把一行读入到string对象中（以换行符结束）。getline的第一个
    参数是ifstream对象，从中读取到内容，第二参数是stream对象。调用完成之后，string对象就装在了一行内容。（io分别对于内存
    来说）

    //:
    #include <string>
    #include <fstream>
    #include <iostream>

    using namespace std;
    int main() {

        ifstream fin("C:\\Users\\Administrator\\Desktop\\text.txt");
        string line;
        while (getline(fin, line)) {
            cout << line << endl;
        }
        return 0;
    }
    ///:~


2.7 vector简介

    C++中提供了标准容器类（container），容器类是标准C++类库中强大工具之一。
    人们经常会把容器类和算法 与 被称为 STL  的东西相混淆。 C++标准委员会对STL进行了大量修改。“标准库容器”

    vector类是一个模板类

2.8 小结

2.9 练习


